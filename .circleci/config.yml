---
orbs:
  gcp-cli: circleci/gcp-cli@3.0.1
  gcp-gke: circleci/gcp-gke@2.0.0

defaults:
  - &gcloud-env
    PROJECT_NAME: "IPNO"
    GOOGLE_PROJECT_ID: "excellent-zoo-300106"
    GOOGLE_COMPUTE_ZONE: "us-central1-a"
    GOOGLE_CLUSTER_NAME: "ipno"
  - &set-push-env
    USER_NAME: "East Agile"
    USER_EMAIL: "open-source@eastagile.com"
    DESTINATION_REPOSITORY_USERNAME: "PublicDataWorks"
    DESTINATION_REPOSITORY_NAME: "llead-backend"
  - &set-gcloud-service-key
    command: |
      echo 'export GCLOUD_SERVICE_KEY=$(echo $GCLOUD_SERVICE_KEY_BASE64 | base64 -d)' >> $BASH_ENV
  - &set-deploy-env
    name: Set deployment env
    command: |
      echo 'export SLUG_BRANCH="${CIRCLE_BRANCH/\//-}"' >> $BASH_ENV
      if [ $CIRCLE_BRANCH == "main" ]
      then
        echo 'export DEPLOY_ENV=--production' >> $BASH_ENV
        echo 'export CLOUD_SQL_DATABASE=$CLOUD_SQL_PRODUCTION' >> $BASH_ENV
        echo 'export NAMESPACE_ENV=ipno-production' >> $BASH_ENV
        echo 'export DAILY_TIME=$PROD_DAILY_TIME' >> $BASH_ENV
        echo 'export DOCKER_PRETAG=backend-production' >> $BASH_ENV
        echo 'export CELERY_NUM_WORKER=4' >> $BASH_ENV
      else
        echo 'export DEPLOY_ENV=--staging' >> $BASH_ENV
        echo 'export CLOUD_SQL_DATABASE=$CLOUD_SQL_STAGING' >> $BASH_ENV
        echo 'export NAMESPACE_ENV=ipno-staging' >> $BASH_ENV
        echo 'export DAILY_TIME=$STAGING_DAILY_TIME' >> $BASH_ENV
        echo 'export DOCKER_PRETAG=backend-staging' >> $BASH_ENV
        echo 'export CELERY_NUM_WORKER=2' >> $BASH_ENV
      fi

version: 2.1
jobs:
  test:
    working_directory: ~/ipno
    docker:
      - image: cimg/python:3.8.5
        environment:
          POSTGRES_USER: ipno
          POSTGRES_DB: ipno
          POSTGRES_PASSWORD: password
          POSTGRES_HOST: localhost
      - image: cimg/postgres:13.7
        environment:
          POSTGRES_USER: ipno
          POSTGRES_DB: ipno
          POSTGRES_PASSWORD: password
      - image: elasticsearch:7.10.1
        name: elasticsearch
        environment:
          - discovery.type=single-node
      - image: redis:7.0.5
        name: redis
    steps:
      - checkout
      - run:
          name: Install native packages
          command: |
            sudo apt-get update && sudo apt-get -y install ghostscript python-wand
      - restore_cache:
          keys:
            - backend-{{ checksum "Dockerfile" }}-{{ checksum "requirements/dev.txt" }}-{{ .Branch }}
          paths:
            - /home/circleci/.pyenv/versions/3.8.5/lib/python3.8/site-packages
      - run:
          name: Install dependencies
          command: |
            pip install -r requirements/dev.txt
      - run:
          name: Install spacy dependencies for nlp
          command: |
            python -m spacy download en_core_web_sm
      - save_cache:
          key: backend-{{ checksum "Dockerfile" }}-{{ checksum "requirements/dev.txt" }}-{{ .Branch }}
          paths:
            - /home/circleci/.pyenv/versions/3.8.5/lib/python3.8/site-packages
      - run:
          name: Lint
          command: bin/lint.sh
      - run:
          name: Tests
          command: |
            mkdir test-results
            python -m pytest --cov-report term --cov=ipno ipno --junitxml=test-results/junit.xml
      - store_test_results:
          path: test-results
      - run:
          name: Coveralls
          command: python -m coveralls

  push_to_public:
    description: Push code to public repository
    machine: true
    environment: *set-push-env
    steps:
      - checkout
      - run:
          name: Push to public
          command: sh bin/public_push.sh

  push_image:
    description: Build docker image
    docker:
      - image: cimg/python:3.8.5
    environment: *gcloud-env
    steps:
      - checkout
      - run: *set-gcloud-service-key
      - run: *set-deploy-env
      - setup_remote_docker:
          docker_layer_caching: true
      - run: echo "$DOCKER_PRETAG-$CIRCLE_BUILD_NUM" > buildtag
      - run: echo -e "$GCLOUD_SERVICE_KEY_BASE64" | base64 --d > gcloud-credentials.json
      - persist_to_workspace:
          root: .
          paths:
            - buildtag
      - run:
          name: Build image
          command: |
            docker build -t ipno-backend .
      - run:
          name: Tag image
          command: |
            docker tag ipno-backend us.gcr.io/$GOOGLE_PROJECT_ID/ipno-backend:$(cat buildtag)
            docker tag ipno-backend us.gcr.io/$GOOGLE_PROJECT_ID/ipno-backend:$SLUG_BRANCH
            docker tag ipno-backend us.gcr.io/$GOOGLE_PROJECT_ID/ipno-backend:$DOCKER_PRETAG-latest
      - gcp-cli/setup:
          components: "gke-gcloud-auth-plugin"
      - run:
          name: Push image
          command: |
            gcloud auth configure-docker
            docker push us.gcr.io/$GOOGLE_PROJECT_ID/ipno-backend:$(cat buildtag)
            docker push us.gcr.io/$GOOGLE_PROJECT_ID/ipno-backend:$SLUG_BRANCH
            docker push us.gcr.io/$GOOGLE_PROJECT_ID/ipno-backend:$DOCKER_PRETAG-latest


  django_migrate:
    description: Migrate database
    machine:
      image: ubuntu-2004:202010-01
    environment: *gcloud-env
    steps:
      - run: *set-gcloud-service-key
      - run: *set-deploy-env
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - gcp-cli/setup:
          components: "gke-gcloud-auth-plugin kubectl"
      - gcp-gke/update-kubeconfig-with-credentials:
          cluster: $GOOGLE_CLUSTER_NAME
          use_gke_cloud_auth_plugin: true
      - run:
          name: Start job
          command: |
            bin/run_spot_job.sh $DEPLOY_ENV $(cat /tmp/workspace/buildtag) migrate

  django_collect_static:
    description: Collect static
    machine:
      image: ubuntu-2004:202010-01
    environment: *gcloud-env
    steps:
      - run: *set-gcloud-service-key
      - run: *set-deploy-env
      - attach_workspace:
          at: /tmp/workspace
      - gcp-cli/setup:
          components: "gke-gcloud-auth-plugin kubectl"
      - gcp-gke/update-kubeconfig-with-credentials:
          cluster: $GOOGLE_CLUSTER_NAME
          use_gke_cloud_auth_plugin: true
      - checkout
      - run:
          name: Collect static
          command: |
            bin/run_spot_job.sh $DEPLOY_ENV $(cat /tmp/workspace/buildtag) collectstatic --no-input

  deploy:
    description: Deploy application to Google Kubernetes Engine
    machine:
      image: ubuntu-2004:202010-01
    environment: *gcloud-env
    steps:
      - checkout
      - run: *set-gcloud-service-key
      - run: *set-deploy-env
      - attach_workspace:
          at: /tmp/workspace
      - gcp-cli/setup:
          components: "gke-gcloud-auth-plugin kubectl"
      - gcp-gke/update-kubeconfig-with-credentials:
          cluster: $GOOGLE_CLUSTER_NAME
          use_gke_cloud_auth_plugin: true
      - run:
          name: Create initial project config
          command: |
            bin/run_spot_job.sh $DEPLOY_ENV $(cat /tmp/workspace/buildtag) init_project_config
      - run:
          name: Deploy celery
          command: |
            export BACKEND_IMAGE_TAG=$(cat /tmp/workspace/buildtag)
            cat kubernetes/celery.yml | envsubst | kubectl apply -n $NAMESPACE_ENV -f -
      - run:
          name: Deploy
          command: |
            export BACKEND_IMAGE_TAG=$(cat /tmp/workspace/buildtag)
            cat kubernetes/ipno.yml | envsubst | kubectl apply -n $NAMESPACE_ENV -f -
      - run:
          name: Setup cronjobs
          command: |
            bin/run_cronjob.sh $DEPLOY_ENV $(cat /tmp/workspace/buildtag) run_daily_tasks "$DAILY_TIME"

workflows:
  version: 2
  test:
    jobs:
      - test:
          filters:
            branches:
              ignore:
                - staging
                - main
                - develop
      - push_image:
          requires:
            - test

  push_to_public:
    jobs:
      - test:
          filters:
            branches:
              only:
                - develop
      - push_image:
          requires:
            - test
      - push_to_public:
          requires:
            - push_image

  deploy_backend:
    jobs:
      - test:
          filters:
            branches:
              only:
                - main
                - staging
      - push_image:
          requires:
            - test
      - django_migrate:
          requires:
            - push_image
      - django_collect_static:
          requires:
            - push_image
      - deploy:
          requires:
            - django_migrate
            - django_collect_static
      - push_to_public:
          requires:
            - deploy
          filters:
            branches:
              only:
                - main