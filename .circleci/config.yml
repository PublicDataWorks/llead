---
orbs:
  gcp-gke: circleci/gcp-gke@1.1.0

defaults:
  - &gcloud-env
    PROJECT_NAME: "IPNO"
    GOOGLE_PROJECT_ID: "excellent-zoo-300106"
    GOOGLE_COMPUTE_ZONE: "us-east4-a"
    GOOGLE_CLUSTER_NAME: "ipno-staging"
  - &set-gcloud-service-key
    command: |
      echo 'export GCLOUD_SERVICE_KEY=$(echo $GCLOUD_SERVICE_KEY_BASE64 | base64 -d)' >> $BASH_ENV

version: 2.1
jobs:
  test:
    working_directory: ~/ipno
    docker:
      - image: circleci/python:3.8.5
        environment:
          POSTGRES_USER: ipno
          POSTGRES_DB: ipno
          POSTGRES_PASSWORD: password
          POSTGRES_HOST: localhost
      - image: circleci/postgres:13.1
        environment:
          POSTGRES_USER: ipno
          POSTGRES_DB: ipno
          POSTGRES_PASSWORD: password
      - image: elasticsearch:7.10.1
        name: elasticsearch
        environment:
          - discovery.type=single-node
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            pip install -r requirements/dev.txt
      - run:
          name: flake8
          command: flake8
      - run:
          name: Tests
          command: python -m pytest --cov-report term --cov=ipno ipno
      - run:
          name: Coveralls
          command: coveralls

  push_image:
    description: Build docker image
    machine: true
    environment: *gcloud-env
    steps:
      - checkout
      - run: *set-gcloud-service-key
      - restore_cache:
          keys:
            - backend-{{ checksum "Dockerfile" }}-{{ checksum "requirements/base.txt" }}-{{ .Branch }}
          paths:
            - /home/circleci/caches/app.tar
      - run: echo "backend-$CIRCLE_BUILD_NUM" > buildnum
      - run: echo -e "$GCLOUD_SERVICE_KEY_BASE64" | base64 --d > gcloud-credentials.json
      - persist_to_workspace:
          root: .
          paths:
            - buildnum
      - run:
          name: Build image
          command: |
            docker build -t gcr.io/$GOOGLE_PROJECT_ID/ipno-backend:$(cat buildnum) .
      - gcp-gke/install
      - gcp-gke/update-kubeconfig-with-credentials:
          cluster: $GOOGLE_CLUSTER_NAME
          perform-login: true
      - run:
          name: Push image
          command: |
            gcloud auth configure-docker
            docker push gcr.io/$GOOGLE_PROJECT_ID/ipno-backend:$(cat buildnum)
      - save_cache:
          key: backend-{{ checksum "Dockerfile" }}-{{ checksum "requirements/base.txt" }}-{{ .Branch }}
          paths:
            - /home/circleci/caches/app.tar

  django_migrate:
    description: Migrate database
    machine: true
    environment: *gcloud-env
    steps:
      - run: *set-gcloud-service-key
      - attach_workspace:
          at: /tmp/workspace
      - gcp-gke/install
      - gcp-gke/update-kubeconfig-with-credentials:
          cluster: $GOOGLE_CLUSTER_NAME
          perform-login: true
      - checkout
      - run:
          name: Start job
          command: |
            bin/run_job.sh --staging $(cat /tmp/workspace/buildnum) migrate

  django_collect_static:
    description: Collect static
    machine: true
    environment: *gcloud-env
    steps:
      - run: *set-gcloud-service-key
      - attach_workspace:
          at: /tmp/workspace
      - gcp-gke/install
      - gcp-gke/update-kubeconfig-with-credentials:
          cluster: $GOOGLE_CLUSTER_NAME
          perform-login: true
      - checkout
      - run:
          name: Collect static
          command: |
            bin/run_job.sh --staging $(cat /tmp/workspace/buildnum) collectstatic --no-input

  deploy:
    description: Deploy application to Google Kubernetes Engine
    machine: true
    environment: *gcloud-env
    steps:
      - checkout
      - run: *set-gcloud-service-key
      - attach_workspace:
          at: /tmp/workspace
      - gcp-gke/install
      - gcp-gke/update-kubeconfig-with-credentials:
          cluster: $GOOGLE_CLUSTER_NAME
          perform-login: true
      - run:
          name: Deploy
          command: |
            export BACKEND_IMAGE_TAG=$(cat /tmp/workspace/buildnum)
            cat kubernetes/ipno.yml | envsubst | kubectl apply -f -
      - run:
          name: Setup cronjobs
          command: |
            bin/run_cronjob.sh --staging $(cat /tmp/workspace/buildnum) import_data "0 5 * * *"

workflows:
  version: 2
  test:
    jobs:
      - test:
          filters:
            branches:
              ignore:
                - staging
                - main

  deploy_backend_staging:
    jobs:
      - test:
          filters:
            branches:
              only: staging
      - push_image:
          requires:
            - test
      - django_migrate:
          requires:
            - push_image
      - django_collect_static:
          requires:
            - push_image
      - deploy:
          requires:
            - django_migrate
            - django_collect_static
