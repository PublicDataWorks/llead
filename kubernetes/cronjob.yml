apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: ${CRONJOB_NAME}
spec:
  schedule: "${CRONJOB_SCHEDULE}"
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      backoffLimit: 0
      template:
        spec:
          affinity:
            nodeAffinity:
              preferredDuringSchedulingIgnoredDuringExecution:
              - weight: 1
                preference:
                  matchExpressions:
                  - key: cloud.google.com/gke-nodepool
                    operator: In
                    values:
                    - ipno-autoscaling
          containers:
            - name: ipno-cronjob
              image: us.gcr.io/$GOOGLE_PROJECT_ID/ipno-backend:${BACKEND_IMAGE_TAG}
              resources:
                requests:
                  cpu: 1
                  memory: 2Gi
              command: [ "/bin/sh", "-c" ]
              args:
                - |
                  trap "touch /tmp/pod/main-terminated" EXIT
                  timeout 20 sh -c 'until nc -z localhost 5432; do sleep 1; echo "wait for db"; done; echo "db connected"'
                  STATUS=$?
                  if [ $STATUS -eq 0 ]; then ipno/manage.py ${CRONJOB_COMMAND};else echo "cannot connect to db"; exit $STATUS; fi
              env:
                - name: POSTGRES_USER
                  valueFrom:
                    secretKeyRef:
                      name: cloudsql
                      key: username
                - name: POSTGRES_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: cloudsql
                      key: password
                - name: POSTGRES_HOST
                  valueFrom:
                    secretKeyRef:
                      name: cloudsql
                      key: host
                - name: DJANGO_SECRET_KEY
                  valueFrom:
                    secretKeyRef:
                      name: django
                      key: secret-key
                - name: DJANGO_SETTINGS_MODULE
                  valueFrom:
                    secretKeyRef:
                      name: django
                      key: setting-module
                - name: ELASTICSEARCH_HOST
                  valueFrom:
                    secretKeyRef:
                      name: elasticsearch
                      key: host
                - name: WRGL_API_KEY
                  valueFrom:
                    secretKeyRef:
                      name: wrgl
                      key: api-key
                - name: DROPBOX_APP_KEY
                  valueFrom:
                    secretKeyRef:
                      name: dropbox
                      key: app-key
                - name: DROPBOX_APP_SECRET
                  valueFrom:
                    secretKeyRef:
                      name: dropbox
                      key: app-secret
                - name: DROPBOX_REFRESH_TOKEN
                  valueFrom:
                    secretKeyRef:
                      name: dropbox
                      key: refresh-token
                - name: SENDINBLUE_API_KEY
                  valueFrom:
                    secretKeyRef:
                      name: sendinblue
                      key: api-key
                - name: MAPBOX_KEY
                  valueFrom:
                    secretKeyRef:
                      name: mapbox
                      key: key
                - name: CELERY_BROKER_URL
                  valueFrom:
                    secretKeyRef:
                      name: celery
                      key: broker-url
                - name: CELERY_RESULT_BACKEND
                  valueFrom:
                    secretKeyRef:
                      name: celery
                      key: result-backend
                - name: FROM_EMAIL
                  valueFrom:
                    configMapKeyRef:
                      name: ipno
                      key: from-email
                - name: FEEDBACK_TO_EMAIL
                  valueFrom:
                    configMapKeyRef:
                      name: ipno
                      key: feedback-to-email
                - name: HOST
                  valueFrom:
                    configMapKeyRef:
                      name: ipno
                      key: host
                - name: GOOGLE_APPLICATION_CREDENTIALS
                  value: "/var/secrets/google/service-account.json"
              volumeMounts:
                - mountPath: /tmp/pod
                  name: tmp-pod
                - name: backend-gsa
                  mountPath: /var/secrets/google
            - image: us.gcr.io/cloudsql-docker/gce-proxy:1.32.0-alpine
              name: cloudsql-proxy
              command: [ "/bin/sh", "-c" ]
              args:
                - |
                  /cloud_sql_proxy -instances=$GOOGLE_PROJECT_ID:us-central1:${CLOUD_SQL_DATABASE}=tcp:5432 -verbose=false &
                  CHILD_PID=$!
                  while true
                    do
                        if [[ -f "/tmp/pod/main-terminated" ]]
                        then
                            kill $PID 2>/dev/null
                            exit 0
                        fi
                        sleep 1
                    done
              volumeMounts:
                - name: tmp-pod
                  mountPath: /tmp/pod
          volumes:
            - name: tmp-pod
              emptyDir: {}
            - name: backend-gsa
              secret:
                secretName: backend-gsa
          serviceAccountName: backend-ksa
          restartPolicy: "Never"
  concurrencyPolicy: Forbid
