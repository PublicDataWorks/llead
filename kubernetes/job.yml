apiVersion: batch/v1
kind: Job
metadata:
  name: ${JOB_NAME}
spec:
  template:
    spec:
      containers:
      - name: ipno-job
        image: us.gcr.io/$GOOGLE_PROJECT_ID/ipno-backend:${BACKEND_IMAGE_TAG}
        command: [ "/bin/sh", "-c" ]
        args:
          - |
            trap "touch /tmp/pod/main-terminated" EXIT
            timeout 20 sh -c 'until nc -z localhost 5432; do sleep 1; echo "wait for db"; done; echo "db connected"'
            STATUS=$?
            if [ $STATUS -eq 0 ]; then ipno/manage.py ${COMMAND};else echo "cannot connect to db"; exit $STATUS; fi
        volumeMounts:
          - name: backend-gsa
            mountPath: /var/secrets/google
          - mountPath: /tmp/pod
            name: tmp-pod
        env:
          - name: POSTGRES_USER
            valueFrom:
              secretKeyRef:
                name: cloudsql
                key: username
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                name: cloudsql
                key: password
          - name: POSTGRES_HOST
            valueFrom:
              secretKeyRef:
                name: cloudsql
                key: host
          - name: DJANGO_SECRET_KEY
            valueFrom:
              secretKeyRef:
                name: django
                key: secret-key
          - name: DJANGO_SETTINGS_MODULE
            valueFrom:
              secretKeyRef:
                name: django
                key: setting-module
          - name: ELASTICSEARCH_HOST
            valueFrom:
              secretKeyRef:
                name: elasticsearch
                key: host
          - name: WRGL_API_KEY
            valueFrom:
              secretKeyRef:
                name: wrgl
                key: api-key
          - name: DROPBOX_APP_KEY
            valueFrom:
              secretKeyRef:
                name: dropbox
                key: app-key
          - name: DROPBOX_APP_SECRET
            valueFrom:
              secretKeyRef:
                name: dropbox
                key: app-secret
          - name: DROPBOX_REFRESH_TOKEN
            valueFrom:
              secretKeyRef:
                name: dropbox
                key: refresh-token
          - name: SENDINBLUE_API_KEY
            valueFrom:
              secretKeyRef:
                name: sendinblue
                key: api-key
          - name: MAPBOX_KEY
            valueFrom:
              secretKeyRef:
                name: mapbox
                key: key
          - name: FROM_EMAIL
            valueFrom:
              configMapKeyRef:
                name: ipno
                key: from-email
          - name: FEEDBACK_TO_EMAIL
            valueFrom:
              configMapKeyRef:
                name: ipno
                key: feedback-to-email
          - name: HOST
            valueFrom:
              configMapKeyRef:
                name: ipno
                key: host
          - name: GOOGLE_APPLICATION_CREDENTIALS
            value: "/var/secrets/google/service-account.json"
      - image: us.gcr.io/cloudsql-docker/gce-proxy:1.32.0-alpine
        name: cloudsql-proxy
        command: [ "/bin/sh", "-c" ]
        volumeMounts:
          - mountPath: /tmp/pod
            name: tmp-pod
        args:
          - |
            /cloud_sql_proxy -instances=$GOOGLE_PROJECT_ID:us-central1:${CLOUD_SQL_DATABASE}=tcp:5432 &
            CHILD_PID=$!
            while true
              do
                  if [[ -f "/tmp/pod/main-terminated" ]]
                  then
                      kill $PID 2>/dev/null
                      exit 0
                  fi
                  sleep 1
              done
      volumes:
        - name: tmp-pod
          emptyDir: { }
        - name: backend-gsa
          secret:
            secretName: backend-gsa
      serviceAccountName: backend-ksa
      restartPolicy: Never
  backoffLimit: 4
